public class Main {
    static int n=5; // Dimensiunea tablei
    static int[][] tabla=new int[6][6];
    static String[] pasi=new String[n*n]; // Vector pentru stocarea pașilor
    static int[] dx = {2, 1, -1, -2, -2, -1, 1, 2}; // Miscarile posibile pe axa x
    static int[] dy = {1, 2, 2, 1, -1, -2, -2, -1}; // Miscarile posibile pe axa y
    //Spre exemplu x = x + dx[i]
    //Si y = y + dy[i].
    //Pentru i=1, calul incearca sa mearga 2 pozitii la dreapta, si 1 pozitie in sus. (daca poate)
    //Acest array simplifica mult codul. Putem testa toate miscarile calului cu doar un singur "for" de la 0 la 7.


    static int k=0; // Pozitia curenta în vectorul de pasi
    static int nrMinimPasi=999;

    public static void PREGATIM_TABLA(){
        /*
        Cerinta spune "fara a trece de 2 ori prin aceeasi pozitie"
        Deci prin urmare tabelul ar arata asa: (toate pozitiile cu valoarea "1")
        1 1 1 1 1
        1 1 1 1 1
        1 1 1 1 1
        1 1 1 1 1
        1 1 1 1 1
         */
        for(int i=1;i<=n;i++){
            for(int j=1;j<=n;j++){
                tabla[i][j]=1;
            }
        }

    }

    public static void AFISAM_TABLA_CURENTA(){
        for(int i=1; i<=n; i++){
            for(int j=1; j<=n; j++){
                System.out.print(tabla[i][j]+" ");
            }
            System.out.println();
        }
        System.out.println();
    }

    public static void CALUL(int x, int y, int x1, int y1) {
        pasi[k] = "(" + x + "," + y + ")"; // Adaugam pozitia curenta
        k++; // Incrementam pozitia curenta

        // Exploram toate miscarile posibile
        boolean blocat = true;
        for (int i = 0; i < 8; i++) {
            int nx = x + dx[i]; // Noua pozitie x
            int ny = y + dy[i]; // Noua pozitie y

            // Verificam dacă noua pozitie este valida (daca nu am iesit din tabla si mai poate fii vizitata)
            if (nx >= 1 && nx <= n && ny >= 1 && ny <= n && tabla[nx][ny] > 0) {
                tabla[nx][ny]--; //Scadem nr ori, in care mai avem voie sa mai atingem pozitia.
                CALUL(nx, ny,x1,y1);  // Continuam recursiv
                tabla[nx][ny]++; //Mergem inapoi
                blocat = false;  // Daca am gasit o miscare valida, nu ne-am blocat
            }

            // Daca nu am gasit miscari valide), afisam solutia partiala
            if (tabla[x1][y1] == 0) {

                if(nrMinimPasi>k)
                {
                    nrMinimPasi=k;

                    System.out.println(k + " pasi! Solutie de distanta minima noua a fost gasita!");

                    for (int j = 0; j < k; j++) {
                        System.out.print(pasi[j] + "->");
                    }
                    System.out.println();
                    AFISAM_TABLA_CURENTA(); // Afisam tabla in momentul in care ne-am blocat
                }
            }
        }

        k--; // Backtracking - revenim la pasul anterior
    }

    public static void main(String[] args) {
        int x0=1, y0=1;//Incem din pozitia tabla[1][1]
        int x1=5, y1=5;//GOLUL nostru. Incercam sa il atingem in minimul de miscari.
        PREGATIM_TABLA();
        tabla[x0][y0]=0;

        CALUL(x0, y0,x1,y1);
    }
}
